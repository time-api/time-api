# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: php:7.3-fpm-buster

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-cache search mongo
      - run: sudo apt-get install php-mongodb
      - run: sudo docker-php-ext-install mongodb

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: composer install
      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - run: vendor/bin/codecept build
      - run: vendor/bin/codecept run

    #  - run: sudo apt update
    #  - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      #- restore_cache:
      #    keys:
      #      # "composer.lock" can be used if it is committed to the repo
      #      - v1-dependencies-{{ checksum "composer.json" }}
      #      # fallback to using the latest cache if no exact match is found
      #      - v1-dependencies-#
#
#      - run: composer install -n --prefer-dist
#      - save_cache:
#          key: v1-dependencies-{{ checksum "composer.json" }}
#          paths:
#            - ./vendor

      # prepare the database
      #- run: touch storage/testing.sqlite
      #- run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
#      - run: ./vendor/bin/codecept build
#      - run: ./vendor/bin/codecept run
